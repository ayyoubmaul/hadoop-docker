version: "2.1"
x-airflow-common: &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-docker.io/hadoop-base:3.3.6}
  environment:
    - AIRFLOW_HOME=/home/airflow
    - AIRFLOW__CORE_dags_folder=/home/airflow/dags
    - AIRFLOW__CORE__EXECUTOR=LocalExecutor
    - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
    # For backward compatibility, with Airflow <2.3
    - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
    - AIRFLOW__CORE__FERNET_KEY=FB0o_zt4e3Ziq3LdUUO7F2Z95cvFFx16hU8jTeR1ASM=
    - AIRFLOW__CORE__LOAD_EXAMPLES=False
    - AIRFLOW__CORE__LOGGING_LEVEL=INFO
  volumes:
    - ./output:/home/airflow/output:z
    - ./dags:/home/airflow/dags:z
    - ./plugins:/home/airflow/plugins:z
    - ./logs:/home/airflow/logs:z
    - ./data/:/hadoop-data/input:z
    - ./map_reduce/:/hadoop-data/map_reduce:z
  depends_on:
    - postgres
  networks:
    - hadoop_network

services:
  namenode:
    image: localhost/namenode
    build: ./namenode
    container_name: namenode
    volumes:
      - hadoop_namenode:/hadoop/dfs/name:z
      - ./data/:/hadoop-data/input:z
      - ./map_reduce/:/hadoop-data/map_reduce:z
      - ./requirements.txt:/hadoop-data/requirements.txt:z
    environment:
      - CLUSTER_NAME=test
    env_file:
      - ./hadoop.env
    ports:
      - 9870:9870
    networks:
      - hadoop_network

  resourcemanager:
    image: localhost/resourcemanager
    build: ./resourcemanager
    container_name: resourcemanager
    restart: on-failure
    depends_on:
      - namenode
      - datanode1
      - datanode2
      # - datanode3
    env_file:
      - ./hadoop.env
    ports:
      - 8089:8088
    networks:
      - hadoop_network

  historyserver:
    image: localhost/historyserver
    build: ./historyserver
    container_name: historyserver
    depends_on:
      - namenode
      - datanode1
      - datanode2
    volumes:
      - hadoop_historyserver:/hadoop/yarn/timeline:z
    env_file:
      - ./hadoop.env
    ports:
      - 8188:8188
    networks:
      - hadoop_network

  nodemanager1:
    image: localhost/nodemanager
    build: ./nodemanager
    container_name: nodemanager1
    depends_on:
      - namenode
      - datanode1
      - datanode2
    env_file:
      - ./hadoop.env
    ports:
      - 8042:8042
    networks:
      - hadoop_network

  datanode1:
    image: localhost/datanode
    build: ./datanode
    container_name: datanode1
    depends_on:
      - namenode
    volumes:
      - hadoop_datanode1:/hadoop/dfs/data:z
    env_file:
      - ./hadoop.env
    networks:
      - hadoop_network

  datanode2:
    image: localhost/datanode
    build: ./datanode
    container_name: datanode2
    depends_on:
      - namenode
    volumes:
      - hadoop_datanode2:/hadoop/dfs/data:z
    env_file:
      - ./hadoop.env
    networks:
      - hadoop_network

  # datanode3:
  #   image: localhost/datanode
  #   build: ./datanode
  #   container_name: datanode3
  #   depends_on:
  #     - namenode
  #   volumes:
  #     - hadoop_datanode3:/hadoop/dfs/data:z
  #   env_file:
  #     - ./hadoop.env
  #   networks:
  #     - hadoop_network

  postgres:
    image: docker.io/postgres:13
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
      - POSTGRES_PORT=5432
    ports:
      - 5432:5432
    networks:
      - hadoop_network

  # airflow-init:
  #   <<: *airflow-common
  #   container_name: airflow_init
  #   entrypoint: /bin/bash
  #   command:
  #     - -c
  #     - airflow users list || ( airflow db init && airflow db upgrade && airflow users create --role Admin --username airflow --password airflow --email airflow@airflow.com --firstname airflow --lastname airflow )
  #   restart: on-failure

  airflow-webserver:
    <<: *airflow-common
    command: airflow webserver
    ports:
      - 8080:8080
    container_name: airflow_webserver
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    command: airflow scheduler
    container_name: airflow_scheduler
    restart: always

volumes:
  hadoop_namenode:
  hadoop_datanode1:
  hadoop_datanode2:
  # hadoop_datanode3:
  hadoop_historyserver:


networks:
  hadoop_network:
    name: hadoop_network
    external: true
